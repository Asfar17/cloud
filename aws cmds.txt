INSTANCE

#!/bin/bash

yum update -y

yum install httpd -y

yum install git -y

git clone https://github.com/AbhilashSivaraman/Basic.git /tmp/mywebsite

cp -R /tmp/mywebsite/* /var/www/html/

systemctl enable httpd

systemctl start httpd


CLOUD9

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class CalculatorTest {
    @Test
    public void testAdd() {
        Calculator calculator = new Calculator();
        assertEquals(5, calculator.add(2, 3));
    }
    @Test
    public void testSub() {
        Calculator calculator = new Calculator();
        assertEquals(5, calculator.sub(10, 5));
    }
    @Test
    public void testMul() {
        Calculator calculator = new Calculator();
        assertEquals(6, calculator.mul(2, 3));
    }
    @Test
    public void testDiv() {
        Calculator calculator = new Calculator();
        assertEquals(2, calculator.div(10, 5));
    }
}
public class Calculator {
    public int add(int a, int b) {
        return a + b;
    }
    public int sub(int a, int b) {
        return a - b;
    }
    public int mul(int a, int b) {
        return a * b;
    }
    public int div(int a, int b) {
        return a / b;
    }
}

wget https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar
wget https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
javac -cp .:junit-4.13.2.jar:hamcrest-core-1.3.jar src/Calculator.java test/CalculatorTest.java
java -cp .:src:test:junit-4.13.2.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore CalculatorTest
Mkdir -p src test
Cd src
Touch calculator.java
Cd ..
Cd test
Touch calculatorTest.java
Cd ..


COMPOSE

->sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

-> sudo chmod +x /usr/local/bin/docker-compose

-> docker-compose --version

-> nano docker-compose.yml

new tab opens

->version: '3.8'

services:
  web:
    image: nginx:latest
    ports:
      - "80:80"
    networks:
      - frontend

  database:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

  cache:
    image: redis:latest
    networks:
      - backend

networks:
  frontend:
  backend:

volumes:
  db-data:

ctrl + o 
enter
ctrl + x

-> docker-compose up -d

-> docker-compose up -d --scale cache=3

-> docker ps
